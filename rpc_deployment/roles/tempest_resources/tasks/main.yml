---
# Copyright 2014, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Ensure cirros image
  glance:
    command: 'image-create'
    openrc_path: /root/openrc
    image_name: cirros
    image_url: "{{ tempest_cirros_image_url }}"
    image_container_format: bare
    image_disk_format: qcow2
    image_is_public: True

- name: Download cirros image for basic ops test
  get_url:
    url: "{{ tempest_cirros_image_url }}"
    dest: '/tmp/cirros.img'
  retries: 3
  delay:

- name: Create tempest image dir
  file:
    path: "{{ item.path }}"
    state: directory
    owner: "root"
    group: "root"
    mode: "{{ item.mode|default('0755') }}"
  with_items:
    - { path: "{{ tempest_image_dir }}" }
  tags:
    - tempest-dirs
    - tempest-config
    - tempest-image

- name: Image(s) download
  get_url:
    url: "{{ item.url }}"
    dest: "{{ tempest_image_dir }}"
    sha256sum: "{{ item.sha256 }}"
  with_items: tempest_images
  tags:
    - tempest-config
    - tempest-image

- name: Locate archives
  shell: |
    ls -1 {{ tempest_image_dir }} | grep '.gz'
  register: tempest_archives
  tags:
    - tempest-config
    - tempest-image
    - tempest-image-unarchive

- name: Image(s) unarchive
  unarchive:
    src: "{{ tempest_image_dir }}/{{ item }}"
    dest: "{{ tempest_image_dir }}"
    copy: "no"
  with_items: tempest_archives.stdout
  tags:
    - tempest-config
    - tempest-image
    - tempest-image-unarchive

- name: Ensure tempest tenants
  keystone:
    command: ensure_tenant
    tenant_name: "{{ item }}"
    description: "{{ item }} Tenant"
    endpoint: "{{ auth_identity_uri }}"
    login_tenant_name: "{{ auth_admin_tenant }}"
    login_user: "{{ auth_admin_username }}"
    login_password: "{{ auth_admin_password }}"
  with_items:
    - demo
    - alt_demo

- name: Ensure tempest users
  keystone:
    command: ensure_user
    tenant_name: "{{ item }}"
    user_name: "{{ item }}"
    password: "{{ item }}"
    description: "{{ item }} User"
    endpoint: "{{ auth_identity_uri }}"
    login_tenant_name: "{{ auth_admin_tenant }}"
    login_user: "{{ auth_admin_username }}"
    login_password: "{{ auth_admin_password }}"
  with_items:
    - demo
    - alt_demo

- name: Ensure tempest users have heat_stack_owners role
  keystone:
    command: ensure_user_role
    tenant_name: "{{ item }}"
    user_name: "{{ item }}"
    role_name: heat_stack_owner
    endpoint: "{{ auth_identity_uri }}"
    login_tenant_name: "{{ auth_admin_tenant }}"
    login_user: "{{ auth_admin_username }}"
    login_password: "{{ auth_admin_password }}"
  with_items:
    - demo
    - alt_demo

- name: Ensure reseller_admin role
  keystone:
    command: ensure_role
    login_tenant_name: "{{ auth_admin_tenant }}"
    login_user: "{{ auth_admin_username }}"
    login_password: "{{ auth_admin_password }}"
    endpoint: "{{ auth_admin_uri }}"
    role_name: "reseller_admin"

- name: Ensure remote_image role exists
  keystone:
    command: ensure_role
    role_name: remote_image
    endpoint: "{{ auth_identity_uri }}"
    login_tenant_name: "{{ auth_admin_tenant }}"
    login_user: "{{ auth_admin_username }}"
    login_password: "{{ auth_admin_password }}"

- name: Get demo tenant id
  keystone:
    command: get_tenant
    tenant_name: demo
    endpoint: "{{ auth_identity_uri }}"
    login_tenant_name: "{{ auth_admin_tenant }}"
    login_user: "{{ auth_admin_username }}"
    login_password: "{{ auth_admin_password }}"

- name: Store demo tenant id
  set_fact:
    keystone_demo_tenant_id: "{{ keystone_facts.id }}"

- name: Ensure public network exists
  neutron:
    command: create_network
    openrc_path: /root/openrc
    net_name: public
    provider_network_type: flat
    provider_physical_network: flat
    router_external: true

- name: Ensure public subnet exists
  neutron:
    command: create_subnet
    openrc_path: /root/openrc
    net_name: public
    subnet_name: public-subnet
    cidr: "{{ tempest_public_subnet_cidr }}"

- name: Ensure private network exists
  neutron:
    command: create_network
    openrc_path: /root/openrc
    net_name: private
    tenant_id: "{{ keystone_demo_tenant_id }}"

- name: Ensure private subnet exists
  neutron:
    command: create_subnet
    openrc_path: /root/openrc
    net_name: private
    subnet_name: private-subnet
    cidr: "{{ tempest_private_subnet_cidr }}"
    tenant_id: "{{ keystone_demo_tenant_id }}"

- name: Create router
  neutron:
    command: create_router
    openrc_path: /root/openrc
    router_name: router
    external_gateway_info: public
    tenant_id: "{{ keystone_demo_tenant_id }}"

- name: Add private subnet to router
  neutron:
    command: add_router_interface
    openrc_path: /root/openrc
    router_name: router
    subnet_name: private-subnet

- name: Check if tempest flavor 201 exists
  shell: |
    . /root/openrc
    nova flavor-show tempest1
  register: tempest1
  ignore_errors: True

- name: Check if tempest flavor 202 exists
  shell: |
    . /root/openrc
    nova flavor-show tempest2
  register: tempest2
  ignore_errors: True

- name: Create tempest flavor 201
  shell: |
    . /root/openrc
    nova flavor-create tempest1 201 256 1 1
  when: tempest1|failed

- name: Create tempest flavor 202
  shell: |
    . /root/openrc
    nova flavor-create tempest2 202 512 1 1
  when: tempest2|failed

- name: Set tempest_run_swift_tests to True when tempest_swift_enabled is True
  set_fact:
    tempest_run_swift_tests: True
  when: (tempest_swift_enabled is defined and tempest_swift_enabled == True) or groups['swift_all']|length > 0

- name: Set tempest_run_swift_tests to False when tempest_swift_enabled == False
  set_fact:
    tempest_run_swift_tests: False
  when: (tempest_swift_enabled is defined and tempest_swift_enabled == False) or groups['swift_all']|length == 0
